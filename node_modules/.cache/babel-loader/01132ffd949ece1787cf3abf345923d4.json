{"ast":null,"code":"import axios from \"axios\";\nimport MockAdapter from \"axios-mock-adapter\";\nimport * as url from \"../url_helper\";\nimport accessToken from \"../jwt-token-access/accessToken\";\nimport { calenderDefaultCategories, chats, contacts, comments, events, groups, messages, orderData, productsData, customerData, shops, invoiceList, cartData, users as members, userProfile } from \"../../common/data\";\nlet users = [{\n  uid: 1,\n  username: \"admin\",\n  role: \"admin\",\n  password: \"123456\",\n  email: \"admin@themesbrand.com\"\n}];\n\nconst fakeBackend = () => {\n  // This sets the mock adapter on the default instance\n  const mock = new MockAdapter(axios, {\n    onNoMatch: \"passthrough\"\n  });\n  mock.onPost(url.POST_FAKE_REGISTER).reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    users.push(user);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, user]);\n      });\n    });\n  });\n  mock.onPost(\"/post-fake-login\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    const validUser = users.filter(usr => usr.email === user.email && usr.password === user.password);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          resolve([200, validUser[0]]);\n        } else {\n          reject([\"Username and password are invalid. Please enter correct username and password\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(\"/fake-forget-pwd\").reply(config => {\n    // User needs to check that user is eXist or not and send mail for Reset New password\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, \"Check you mail and reset your password.\"]);\n      });\n    });\n  });\n  mock.onPost(\"/post-jwt-register\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    users.push(user);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, user]);\n      });\n    });\n  });\n  mock.onPost(\"/post-jwt-login\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    const validUser = users.filter(usr => usr.email === user.email && usr.password === user.password);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          // You have to generate AccessToken by jwt. but this is fakeBackend so, right now its dummy\n          const token = accessToken; // JWT AccessToken\n\n          const tokenObj = {\n            accessToken: token\n          }; // Token Obj\n\n          const validUserObj = { ...validUser[0],\n            ...tokenObj\n          }; // validUser Obj\n\n          resolve([200, validUserObj]);\n        } else {\n          reject([400, \"Username and password are invalid. Please enter correct username and password\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(\"/post-jwt-profile\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    const one = config.headers;\n    let finalToken = one.Authorization;\n    const validUser = users.filter(usr => usr.uid === user.idx);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        // Verify Jwt token from header.Authorization\n        if (finalToken === accessToken) {\n          if (validUser[\"length\"] === 1) {\n            let objIndex; //Find index of specific object using findIndex method.\n\n            objIndex = users.findIndex(obj => obj.uid === user.idx); //Update object's name property.\n\n            users[objIndex].username = user.username; // Assign a value to locastorage\n\n            localStorage.removeItem(\"authUser\");\n            localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]));\n            resolve([200, \"Profile Updated Successfully\"]);\n          } else {\n            reject([400, \"Something wrong for edit profile\"]);\n          }\n        } else {\n          reject([400, \"Invalid Token !!\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(\"/post-fake-profile\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    const validUser = users.filter(usr => usr.uid === user.idx);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          let objIndex; //Find index of specific object using findIndex method.\n\n          objIndex = users.findIndex(obj => obj.uid === user.idx); //Update object's name property.\n\n          users[objIndex].username = user.username; // Assign a value to locastorage\n\n          localStorage.removeItem(\"authUser\");\n          localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]));\n          resolve([200, \"Profile Updated Successfully\"]);\n        } else {\n          reject([400, \"Something wrong for edit profile\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(\"/jwt-forget-pwd\").reply(config => {\n    // User needs to check that user is eXist or not and send mail for Reset New password\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, \"Check you mail and reset your password.\"]);\n      });\n    });\n  });\n  mock.onPost(\"/social-login\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (user && user.token) {\n          // You have to generate AccessToken by jwt. but this is fakeBackend so, right now its dummy\n          const token = accessToken; // JWT AccessToken\n\n          const tokenObj = {\n            accessToken: token\n          }; // Token Obj\n\n          const validUserObj = { ...user,\n            ...tokenObj\n          }; // validUser Obj\n\n          resolve([200, validUserObj]);\n        } else {\n          reject([400, \"Username and password are invalid. Please enter correct username and password\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_PRODUCTS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (productsData) {\n          // Passing fake JSON data as response\n          resolve([200, productsData]);\n        } else {\n          reject([400, \"Cannot get products\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(new RegExp(`${url.GET_PRODUCTS_DETAIL}/*`)).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (productsData) {\n          // Passing fake JSON data as response\n          const {\n            params\n          } = config;\n          const product = productsData.find(product => product.id.toString() === params.id.toString());\n          resolve([200, { ...product,\n            comments\n          }]);\n        } else {\n          reject([400, \"Cannot get product detail\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_EVENTS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (events) {\n          // Passing fake JSON data as response\n          resolve([200, events]);\n        } else {\n          reject([400, \"Cannot get events\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(url.ADD_NEW_USER).reply(user => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (user && user.data) {\n          // Passing fake JSON data as response\n          resolve([200, user.data]);\n        } else {\n          reject([400, \"Cannot add user\"]);\n        }\n      });\n    });\n  });\n  mock.onPut(url.UPDATE_USER).reply(user => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (user && user.data) {\n          // Passing fake JSON data as response\n          resolve([200, user.data]);\n        } else {\n          reject([400, \"Cannot update user\"]);\n        }\n      });\n    });\n  });\n  mock.onDelete(url.DELETE_USER).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.user]);\n        } else {\n          reject([400, \"Cannot delete user\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(url.ADD_NEW_PROJECT).reply(project => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (project && project.data) {\n          // Passing fake JSON data as response\n          resolve([200, project.data]);\n        } else {\n          reject([400, \"Cannot add project\"]);\n        }\n      });\n    });\n  });\n  mock.onPut(url.UPDATE_PROJECT).reply(project => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (project && project.data) {\n          // Passing fake JSON data as response\n          resolve([200, project.data]);\n        } else {\n          reject([400, \"Cannot update project\"]);\n        }\n      });\n    });\n  });\n  mock.onDelete(url.DELETE_PROJECT).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.project]);\n        } else {\n          reject([400, \"Cannot delete project\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(url.ADD_NEW_EVENT).reply(event => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (event && event.data) {\n          // Passing fake JSON data as response\n          resolve([200, event.data]);\n        } else {\n          reject([400, \"Cannot add event\"]);\n        }\n      });\n    });\n  });\n  mock.onPut(url.UPDATE_EVENT).reply(event => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (event && event.data) {\n          // Passing fake JSON data as response\n          resolve([200, event.data]);\n        } else {\n          reject([400, \"Cannot update event\"]);\n        }\n      });\n    });\n  });\n  mock.onDelete(url.DELETE_EVENT).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.event]);\n        } else {\n          reject([400, \"Cannot delete event\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_CATEGORIES).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (calenderDefaultCategories) {\n          // Passing fake JSON data as response\n          resolve([200, calenderDefaultCategories]);\n        } else {\n          reject([400, \"Cannot get categories\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_CHATS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (chats) {\n          // Passing fake JSON data as response\n          resolve([200, chats]);\n        } else {\n          reject([400, \"Cannot get chats\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_GROUPS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (groups) {\n          // Passing fake JSON data as response\n          resolve([200, groups]);\n        } else {\n          reject([400, \"Cannot get groups\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_CONTACTS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (contacts) {\n          // Passing fake JSON data as response\n          resolve([200, contacts]);\n        } else {\n          reject([400, \"Cannot get contacts\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(new RegExp(`${url.GET_MESSAGES}/*`)).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (messages) {\n          // Passing fake JSON data as response\n          const {\n            params\n          } = config;\n          const filteredMessages = messages.filter(msg => msg.roomId === params.roomId);\n          resolve([200, filteredMessages]);\n        } else {\n          reject([400, \"Cannot get messages\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(url.ADD_MESSAGE).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config.data) {\n          // Passing fake JSON data as response\n          resolve([200, config.data]);\n        } else {\n          reject([400, \"Cannot add message\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_ORDERS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (orderData) {\n          // Passing fake JSON data as response\n          resolve([200, orderData]);\n        } else {\n          reject([400, \"Cannot get orderData\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(url.ADD_NEW_ORDER).reply(order => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (order && order.data) {\n          // Passing fake JSON data as response\n          resolve([200, order.data]);\n        } else {\n          reject([400, \"Cannot add order\"]);\n        }\n      });\n    });\n  });\n  mock.onPut(url.UPDATE_ORDER).reply(order => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (order && order.data) {\n          // Passing fake JSON data as response\n          resolve([200, order.data]);\n        } else {\n          reject([400, \"Cannot update order\"]);\n        }\n      });\n    });\n  });\n  mock.onDelete(url.DELETE_ORDER).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.order]);\n        } else {\n          reject([400, \"Cannot delete order\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_CART_DATA).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (cartData) {\n          // Passing fake JSON data as response\n          resolve([200, cartData]);\n        } else {\n          reject([400, \"Cannot get cart data\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_CUSTOMERS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (customerData) {\n          // Passing fake JSON data as response\n          resolve([200, customerData]);\n        } else {\n          reject([400, \"Cannot get customers data\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(url.ADD_NEW_CUSTOMER).reply(customer => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (customer && customer.data) {\n          // Passing fake JSON data as response\n          resolve([200, customer.data]);\n        } else {\n          reject([400, \"Cannot add customer\"]);\n        }\n      });\n    });\n  });\n  mock.onPut(url.UPDATE_CUSTOMER).reply(customer => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (customer && customer.data) {\n          // Passing fake JSON data as response\n          resolve([200, customer.data]);\n        } else {\n          reject([400, \"Cannot update customer\"]);\n        }\n      });\n    });\n  });\n  mock.onDelete(url.DELETE_CUSTOMER).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.customer]);\n        } else {\n          reject([400, \"Cannot delete customer\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_SHOPS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (shops) {\n          // Passing fake JSON data as response\n          resolve([200, shops]);\n        } else {\n          reject([400, \"Cannot get shops data\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_INVOICES).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (invoiceList) {\n          // Passing fake JSON data as response\n          resolve([200, invoiceList]);\n        } else {\n          reject([400, \"Cannot get invoices\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(url.ADD_NEW_INVOICE).reply(invoice => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (invoice && invoice.data) {\n          //passing fake JSON data as response\n          resolve([200, invoice.data]);\n        } else {\n          reject([400, \"Cannot add invoice\"]);\n        }\n      });\n    });\n  });\n  mock.onPut(url.UPDATE_INVOICE).reply(invoice => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (invoice && invoice.data) {\n          //passing fake data JSON as response\n          resolve([200, invoice.data]);\n        } else {\n          reject([400, \"Cannot update invoice\"]);\n        }\n      });\n    });\n  });\n  mock.onDelete(url.DELETE_INVOICE).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.invoice]);\n        } else {\n          reject([400, \"Cannot delete invoice\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(new RegExp(`${url.GET_INVOICE_DETAIL}/*`)).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (invoiceList) {\n          // Passing fake JSON data as response\n          const {\n            params\n          } = config;\n          const invoice = invoiceList.find(invoice => invoice.id.toString() === params.id.toString());\n          resolve([200, invoice]);\n        } else {\n          reject([400, \"Cannot get invoice\"]);\n        }\n      });\n    });\n  }); // mock.onGet(url.GET_PROJECTS).reply(() => {\n  //   return new Promise((resolve, reject) => {\n  //     setTimeout(() => {\n  //       if (projects) {\n  //         // Passing fake JSON data as response\n  //         resolve([200, projects]);\n  //       } else {\n  //         reject([400, \"Cannot get projects\"]);\n  //       }\n  //     });\n  //   });\n  // });\n  // mock.onGet(new RegExp(`${url.GET_PROJECT_DETAIL}/*`)).reply((config) => {\n  //   return new Promise((resolve, reject) => {\n  //     setTimeout(() => {\n  //       if (projects) {\n  //         // Passing fake JSON data as response\n  //         const { params } = config;\n  //         const project = projects.find(\n  //           (project) => project.id.toString() === params.id.toString()\n  //         );\n  //         resolve([200, project]);\n  //       } else {\n  //         reject([400, \"Cannot get project detail\"]);\n  //       }\n  //     });\n  //   });\n  // });\n  // mock.onGet(url.GET_TASKS).reply(() => {\n  //   return new Promise((resolve, reject) => {\n  //     setTimeout(() => {\n  //       if (tasks) {\n  //         // Passing fake JSON data as response\n  //         resolve([200, tasks]);\n  //       } else {\n  //         reject([400, \"Cannot get tasks\"]);\n  //       }\n  //     });\n  //   });\n  // });\n\n  mock.onGet(url.GET_USERS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (members) {\n          // Passing fake JSON data as response\n          resolve([200, members]);\n        } else {\n          reject([400, \"Cannot get users\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_USER_PROFILE).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (userProfile) {\n          // Passing fake JSON data as response\n          resolve([200, userProfile]);\n        } else {\n          reject([400, \"Cannot get user profile\"]);\n        }\n      });\n    });\n  });\n};\n\nexport default fakeBackend;","map":{"version":3,"sources":["/home/happy/Downloads/main-main/src/helpers/AuthType/fakeBackend.js"],"names":["axios","MockAdapter","url","accessToken","calenderDefaultCategories","chats","contacts","comments","events","groups","messages","orderData","productsData","customerData","shops","invoiceList","cartData","users","members","userProfile","uid","username","role","password","email","fakeBackend","mock","onNoMatch","onPost","POST_FAKE_REGISTER","reply","config","user","JSON","parse","push","Promise","resolve","reject","setTimeout","validUser","filter","usr","token","tokenObj","validUserObj","one","headers","finalToken","Authorization","idx","objIndex","findIndex","obj","localStorage","removeItem","setItem","stringify","onGet","GET_PRODUCTS","RegExp","GET_PRODUCTS_DETAIL","params","product","find","id","toString","GET_EVENTS","ADD_NEW_USER","data","onPut","UPDATE_USER","onDelete","DELETE_USER","ADD_NEW_PROJECT","project","UPDATE_PROJECT","DELETE_PROJECT","ADD_NEW_EVENT","event","UPDATE_EVENT","DELETE_EVENT","GET_CATEGORIES","GET_CHATS","GET_GROUPS","GET_CONTACTS","GET_MESSAGES","filteredMessages","msg","roomId","ADD_MESSAGE","GET_ORDERS","ADD_NEW_ORDER","order","UPDATE_ORDER","DELETE_ORDER","GET_CART_DATA","GET_CUSTOMERS","ADD_NEW_CUSTOMER","customer","UPDATE_CUSTOMER","DELETE_CUSTOMER","GET_SHOPS","GET_INVOICES","ADD_NEW_INVOICE","invoice","UPDATE_INVOICE","DELETE_INVOICE","GET_INVOICE_DETAIL","GET_USERS","GET_USER_PROFILE"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport MockAdapter from \"axios-mock-adapter\";\nimport * as url from \"../url_helper\";\nimport accessToken from \"../jwt-token-access/accessToken\";\nimport {\n  calenderDefaultCategories,\n  chats,\n  contacts,\n  comments,\n  events,\n  groups,\n  messages,\n  orderData,\n  productsData,\n  customerData,\n  shops,\n  invoiceList,\n  cartData,\n  users as members,\n  userProfile,\n} from \"../../common/data\";\n\nlet users = [\n  {\n    uid: 1,\n    username: \"admin\",\n    role: \"admin\",\n    password: \"123456\",\n    email: \"admin@themesbrand.com\",\n  },\n];\n\nconst fakeBackend = () => {\n  // This sets the mock adapter on the default instance\n  const mock = new MockAdapter(axios, { onNoMatch: \"passthrough\" });\n\n  mock.onPost(url.POST_FAKE_REGISTER).reply((config) => {\n    const user = JSON.parse(config[\"data\"]);\n    users.push(user);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, user]);\n      });\n    });\n  });\n\n  mock.onPost(\"/post-fake-login\").reply((config) => {\n    const user = JSON.parse(config[\"data\"]);\n    const validUser = users.filter(\n      (usr) => usr.email === user.email && usr.password === user.password\n    );\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          resolve([200, validUser[0]]);\n        } else {\n          reject([\n            \"Username and password are invalid. Please enter correct username and password\",\n          ]);\n        }\n      });\n    });\n  });\n\n  mock.onPost(\"/fake-forget-pwd\").reply((config) => {\n    // User needs to check that user is eXist or not and send mail for Reset New password\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, \"Check you mail and reset your password.\"]);\n      });\n    });\n  });\n\n  mock.onPost(\"/post-jwt-register\").reply((config) => {\n    const user = JSON.parse(config[\"data\"]);\n    users.push(user);\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, user]);\n      });\n    });\n  });\n\n  mock.onPost(\"/post-jwt-login\").reply((config) => {\n    const user = JSON.parse(config[\"data\"]);\n    const validUser = users.filter(\n      (usr) => usr.email === user.email && usr.password === user.password\n    );\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          // You have to generate AccessToken by jwt. but this is fakeBackend so, right now its dummy\n          const token = accessToken;\n\n          // JWT AccessToken\n          const tokenObj = { accessToken: token }; // Token Obj\n          const validUserObj = { ...validUser[0], ...tokenObj }; // validUser Obj\n\n          resolve([200, validUserObj]);\n        } else {\n          reject([\n            400,\n            \"Username and password are invalid. Please enter correct username and password\",\n          ]);\n        }\n      });\n    });\n  });\n\n  mock.onPost(\"/post-jwt-profile\").reply((config) => {\n    const user = JSON.parse(config[\"data\"]);\n\n    const one = config.headers;\n\n    let finalToken = one.Authorization;\n\n    const validUser = users.filter((usr) => usr.uid === user.idx);\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        // Verify Jwt token from header.Authorization\n        if (finalToken === accessToken) {\n          if (validUser[\"length\"] === 1) {\n            let objIndex;\n\n            //Find index of specific object using findIndex method.\n            objIndex = users.findIndex((obj) => obj.uid === user.idx);\n\n            //Update object's name property.\n            users[objIndex].username = user.username;\n\n            // Assign a value to locastorage\n            localStorage.removeItem(\"authUser\");\n            localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]));\n\n            resolve([200, \"Profile Updated Successfully\"]);\n          } else {\n            reject([400, \"Something wrong for edit profile\"]);\n          }\n        } else {\n          reject([400, \"Invalid Token !!\"]);\n        }\n      });\n    });\n  });\n\n  mock.onPost(\"/post-fake-profile\").reply((config) => {\n    const user = JSON.parse(config[\"data\"]);\n\n    const validUser = users.filter((usr) => usr.uid === user.idx);\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          let objIndex;\n\n          //Find index of specific object using findIndex method.\n          objIndex = users.findIndex((obj) => obj.uid === user.idx);\n\n          //Update object's name property.\n          users[objIndex].username = user.username;\n\n          // Assign a value to locastorage\n          localStorage.removeItem(\"authUser\");\n          localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]));\n\n          resolve([200, \"Profile Updated Successfully\"]);\n        } else {\n          reject([400, \"Something wrong for edit profile\"]);\n        }\n      });\n    });\n  });\n\n  mock.onPost(\"/jwt-forget-pwd\").reply((config) => {\n    // User needs to check that user is eXist or not and send mail for Reset New password\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, \"Check you mail and reset your password.\"]);\n      });\n    });\n  });\n\n  mock.onPost(\"/social-login\").reply((config) => {\n   \n    const user = JSON.parse(config[\"data\"]);\n \n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (user && user.token) {\n          // You have to generate AccessToken by jwt. but this is fakeBackend so, right now its dummy\n          const token = accessToken;\n\n          // JWT AccessToken\n          const tokenObj = { accessToken: token }; // Token Obj\n          const validUserObj = { ...user, ...tokenObj }; // validUser Obj\n     \n          resolve([200, validUserObj]);\n        } else {\n          reject([\n            400,\n            \"Username and password are invalid. Please enter correct username and password\",\n          ]);\n        }\n      });\n    });\n  });\n\n  mock.onGet(url.GET_PRODUCTS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (productsData) {\n          // Passing fake JSON data as response\n          resolve([200, productsData]);\n        } else {\n          reject([400, \"Cannot get products\"]);\n        }\n      });\n    });\n  });\n\n  mock.onGet(new RegExp(`${url.GET_PRODUCTS_DETAIL}/*`)).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (productsData) {\n          // Passing fake JSON data as response\n          const { params } = config;\n          const product = productsData.find(\n            product => product.id.toString() === params.id.toString()\n          );\n          resolve([200, { ...product, comments }]);\n        } else {\n          reject([400, \"Cannot get product detail\"]);\n        }\n      });\n    });\n  });\n\n  mock.onGet(url.GET_EVENTS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (events) {\n          // Passing fake JSON data as response\n          resolve([200, events]);\n        } else {\n          reject([400, \"Cannot get events\"]);\n        }\n      });\n    });\n  });\n\n  mock.onPost(url.ADD_NEW_USER).reply((user) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (user && user.data) {\n          // Passing fake JSON data as response\n          resolve([200, user.data]);\n        } else {\n          reject([400, \"Cannot add user\"]);\n        }\n      });\n    });\n  });\n\n  mock.onPut(url.UPDATE_USER).reply((user) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (user && user.data) {\n          // Passing fake JSON data as response\n          resolve([200, user.data]);\n        } else {\n          reject([400, \"Cannot update user\"]);\n        }\n      });\n    });\n  });\n\n  mock.onDelete(url.DELETE_USER).reply((config) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.user]);\n        } else {\n          reject([400, \"Cannot delete user\"]);\n        }\n      });\n    });\n  });\n\n  mock.onPost(url.ADD_NEW_PROJECT).reply((project) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (project && project.data) {\n          // Passing fake JSON data as response\n          resolve([200, project.data]);\n        } else {\n          reject([400, \"Cannot add project\"]);\n        }\n      });\n    });\n  });\n\n  mock.onPut(url.UPDATE_PROJECT).reply((project) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (project && project.data) {\n          // Passing fake JSON data as response\n          resolve([200, project.data]);\n        } else {\n          reject([400, \"Cannot update project\"]);\n        }\n      });\n    });\n  });\n\n  mock.onDelete(url.DELETE_PROJECT).reply((config) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.project]);\n        } else {\n          reject([400, \"Cannot delete project\"]);\n        }\n      });\n    });\n  });\n\n  mock.onPost(url.ADD_NEW_EVENT).reply((event) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (event && event.data) {\n          // Passing fake JSON data as response\n          resolve([200, event.data]);\n        } else {\n          reject([400, \"Cannot add event\"]);\n        }\n      });\n    });\n  });\n\n  mock.onPut(url.UPDATE_EVENT).reply((event) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (event && event.data) {\n          // Passing fake JSON data as response\n          resolve([200, event.data]);\n        } else {\n          reject([400, \"Cannot update event\"]);\n        }\n      });\n    });\n  });\n\n  mock.onDelete(url.DELETE_EVENT).reply((config) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.event]);\n        } else {\n          reject([400, \"Cannot delete event\"]);\n        }\n      });\n    });\n  });\n\n  mock.onGet(url.GET_CATEGORIES).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (calenderDefaultCategories) {\n          // Passing fake JSON data as response\n          resolve([200, calenderDefaultCategories]);\n        } else {\n          reject([400, \"Cannot get categories\"]);\n        }\n      });\n    });\n  });\n\n  mock.onGet(url.GET_CHATS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (chats) {\n          // Passing fake JSON data as response\n          resolve([200, chats]);\n        } else {\n          reject([400, \"Cannot get chats\"]);\n        }\n      });\n    });\n  });\n\n  mock.onGet(url.GET_GROUPS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (groups) {\n          // Passing fake JSON data as response\n          resolve([200, groups]);\n        } else {\n          reject([400, \"Cannot get groups\"]);\n        }\n      });\n    });\n  });\n\n  mock.onGet(url.GET_CONTACTS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (contacts) {\n          // Passing fake JSON data as response\n          resolve([200, contacts]);\n        } else {\n          reject([400, \"Cannot get contacts\"]);\n        }\n      });\n    });\n  });\n\n  mock.onGet(new RegExp(`${url.GET_MESSAGES}/*`)).reply((config) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (messages) {\n          // Passing fake JSON data as response\n          const { params } = config;\n          const filteredMessages = messages.filter(\n            (msg) => msg.roomId === params.roomId\n          );\n          resolve([200, filteredMessages]);\n        } else {\n          reject([400, \"Cannot get messages\"]);\n        }\n      });\n    });\n  });\n\n  mock.onPost(url.ADD_MESSAGE).reply((config) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config.data) {\n          // Passing fake JSON data as response\n          resolve([200, config.data]);\n        } else {\n          reject([400, \"Cannot add message\"]);\n        }\n      });\n    });\n  });\n\n  mock.onGet(url.GET_ORDERS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (orderData) {\n          // Passing fake JSON data as response\n          resolve([200, orderData]);\n        } else {\n          reject([400, \"Cannot get orderData\"]);\n        }\n      });\n    });\n  });\n\n  mock.onPost(url.ADD_NEW_ORDER).reply((order) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (order && order.data) {\n          // Passing fake JSON data as response\n          resolve([200, order.data]);\n        } else {\n          reject([400, \"Cannot add order\"]);\n        }\n      });\n    });\n  });\n\n  mock.onPut(url.UPDATE_ORDER).reply((order) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (order && order.data) {\n          // Passing fake JSON data as response\n          resolve([200, order.data]);\n        } else {\n          reject([400, \"Cannot update order\"]);\n        }\n      });\n    });\n  });\n\n  mock.onDelete(url.DELETE_ORDER).reply((config) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.order]);\n        } else {\n          reject([400, \"Cannot delete order\"]);\n        }\n      });\n    });\n  });\n\n  mock.onGet(url.GET_CART_DATA).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (cartData) {\n          // Passing fake JSON data as response\n          resolve([200, cartData]);\n        } else {\n          reject([400, \"Cannot get cart data\"]);\n        }\n      });\n    });\n  });\n\n  mock.onGet(url.GET_CUSTOMERS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (customerData) {\n          // Passing fake JSON data as response\n          resolve([200, customerData]);\n        } else {\n          reject([400, \"Cannot get customers data\"]);\n        }\n      });\n    });\n  });\n\n  mock.onPost(url.ADD_NEW_CUSTOMER).reply((customer) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (customer && customer.data) {\n          // Passing fake JSON data as response\n          resolve([200, customer.data]);\n        } else {\n          reject([400, \"Cannot add customer\"]);\n        }\n      });\n    });\n  });\n\n  mock.onPut(url.UPDATE_CUSTOMER).reply((customer) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (customer && customer.data) {\n          // Passing fake JSON data as response\n          resolve([200, customer.data]);\n        } else {\n          reject([400, \"Cannot update customer\"]);\n        }\n      });\n    });\n  });\n\n  mock.onDelete(url.DELETE_CUSTOMER).reply((config) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.customer]);\n        } else {\n          reject([400, \"Cannot delete customer\"]);\n        }\n      });\n    });\n  });\n\n  mock.onGet(url.GET_SHOPS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (shops) {\n          // Passing fake JSON data as response\n          resolve([200, shops]);\n        } else {\n          reject([400, \"Cannot get shops data\"]);\n        }\n      });\n    });\n  });\n\n\n\n  mock.onGet(url.GET_INVOICES).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (invoiceList) {\n          // Passing fake JSON data as response\n          resolve([200, invoiceList]);\n        } else {\n          reject([400, \"Cannot get invoices\"]);\n        }\n      });\n    });\n  });\n\n  mock.onPost(url.ADD_NEW_INVOICE).reply((invoice) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (invoice && invoice.data) {\n          //passing fake JSON data as response\n          resolve([200, invoice.data]);\n        } else {\n          reject([400, \"Cannot add invoice\"]);\n        }\n      });\n    });\n  });\n\n  mock.onPut(url.UPDATE_INVOICE).reply((invoice) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (invoice && invoice.data) {\n          //passing fake data JSON as response\n          resolve([200, invoice.data]);\n        } else {\n          reject([400, \"Cannot update invoice\"]);\n        }\n      });\n    });\n  });\n  mock.onDelete(url.DELETE_INVOICE).reply((config) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.invoice]);\n        } else {\n          reject([400, \"Cannot delete invoice\"]);\n        }\n      });\n    });\n  });\n\n  mock.onGet(new RegExp(`${url.GET_INVOICE_DETAIL}/*`)).reply((config) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (invoiceList) {\n          // Passing fake JSON data as response\n          const { params } = config;\n          const invoice = invoiceList.find(\n            (invoice) => invoice.id.toString() === params.id.toString()\n          );\n          resolve([200, invoice]);\n        } else {\n          reject([400, \"Cannot get invoice\"]);\n        }\n      });\n    });\n  });\n\n  // mock.onGet(url.GET_PROJECTS).reply(() => {\n  //   return new Promise((resolve, reject) => {\n  //     setTimeout(() => {\n  //       if (projects) {\n  //         // Passing fake JSON data as response\n  //         resolve([200, projects]);\n  //       } else {\n  //         reject([400, \"Cannot get projects\"]);\n  //       }\n  //     });\n  //   });\n  // });\n\n  // mock.onGet(new RegExp(`${url.GET_PROJECT_DETAIL}/*`)).reply((config) => {\n  //   return new Promise((resolve, reject) => {\n  //     setTimeout(() => {\n  //       if (projects) {\n  //         // Passing fake JSON data as response\n  //         const { params } = config;\n  //         const project = projects.find(\n  //           (project) => project.id.toString() === params.id.toString()\n  //         );\n  //         resolve([200, project]);\n  //       } else {\n  //         reject([400, \"Cannot get project detail\"]);\n  //       }\n  //     });\n  //   });\n  // });\n\n  // mock.onGet(url.GET_TASKS).reply(() => {\n  //   return new Promise((resolve, reject) => {\n  //     setTimeout(() => {\n  //       if (tasks) {\n  //         // Passing fake JSON data as response\n  //         resolve([200, tasks]);\n  //       } else {\n  //         reject([400, \"Cannot get tasks\"]);\n  //       }\n  //     });\n  //   });\n  // });\n\n  mock.onGet(url.GET_USERS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (members) {\n          // Passing fake JSON data as response\n          resolve([200, members]);\n        } else {\n          reject([400, \"Cannot get users\"]);\n        }\n      });\n    });\n  });\n\n  mock.onGet(url.GET_USER_PROFILE).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (userProfile) {\n          // Passing fake JSON data as response\n          resolve([200, userProfile]);\n        } else {\n          reject([400, \"Cannot get user profile\"]);\n        }\n      });\n    });\n  });\n};\n\nexport default fakeBackend;\n"]},"metadata":{},"sourceType":"module"}