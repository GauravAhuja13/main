{"ast":null,"code":"import { GET_USERS_SUCCESS, GET_USERS_FAIL, GET_USER_PROFILE_SUCCESS, GET_USER_PROFILE_FAIL, ADD_USER_SUCCESS, ADD_USER_FAIL, UPDATE_USER_SUCCESS, UPDATE_USER_FAIL, DELETE_USER_SUCCESS, DELETE_USER_FAIL } from \"./actionTypes\";\nconst INIT_STATE = {\n  users: [],\n  userProfile: {},\n  error: {}\n};\n\nconst contacts = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INIT_STATE;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case GET_USERS_SUCCESS:\n      return { ...state,\n        users: action.payload\n      };\n\n    case GET_USERS_FAIL:\n      return { ...state,\n        error: action.payload\n      };\n\n    case ADD_USER_SUCCESS:\n      return { ...state,\n        users: [...state.users, action.payload]\n      };\n\n    case ADD_USER_FAIL:\n      return { ...state,\n        error: action.payload\n      };\n\n    case UPDATE_USER_SUCCESS:\n      return { ...state,\n        users: state.users.map(user => user.id.toString() === action.payload.id.toString() ? {\n          user,\n          ...action.payload\n        } : user)\n      };\n\n    case UPDATE_USER_FAIL:\n      return { ...state,\n        error: action.payload\n      };\n\n    case DELETE_USER_SUCCESS:\n      return { ...state,\n        users: state.users.filter(user => user.id.toString() !== action.payload.id.toString())\n      };\n\n    case DELETE_USER_FAIL:\n      return { ...state,\n        error: action.payload\n      };\n\n    case GET_USER_PROFILE_SUCCESS:\n      return { ...state,\n        userProfile: action.payload\n      };\n\n    case GET_USER_PROFILE_FAIL:\n      return { ...state,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default contacts;","map":{"version":3,"sources":["/home/happy/Downloads/main-main/src/store/contacts/reducer.js"],"names":["GET_USERS_SUCCESS","GET_USERS_FAIL","GET_USER_PROFILE_SUCCESS","GET_USER_PROFILE_FAIL","ADD_USER_SUCCESS","ADD_USER_FAIL","UPDATE_USER_SUCCESS","UPDATE_USER_FAIL","DELETE_USER_SUCCESS","DELETE_USER_FAIL","INIT_STATE","users","userProfile","error","contacts","state","action","type","payload","map","user","id","toString","filter"],"mappings":"AAAA,SACEA,iBADF,EAEEC,cAFF,EAGEC,wBAHF,EAIEC,qBAJF,EAKEC,gBALF,EAMEC,aANF,EAOEC,mBAPF,EAQEC,gBARF,EASEC,mBATF,EAUEC,gBAVF,QAYO,eAZP;AAcA,MAAMC,UAAU,GAAG;AACjBC,EAAAA,KAAK,EAAE,EADU;AAEjBC,EAAAA,WAAW,EAAE,EAFI;AAGjBC,EAAAA,KAAK,EAAE;AAHU,CAAnB;;AAMA,MAAMC,QAAQ,GAAG,YAAgC;AAAA,MAA/BC,KAA+B,uEAAvBL,UAAuB;AAAA,MAAXM,MAAW;;AAC/C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKjB,iBAAL;AACE,aAAO,EACL,GAAGe,KADE;AAELJ,QAAAA,KAAK,EAAEK,MAAM,CAACE;AAFT,OAAP;;AAKF,SAAKjB,cAAL;AACE,aAAO,EACL,GAAGc,KADE;AAELF,QAAAA,KAAK,EAAEG,MAAM,CAACE;AAFT,OAAP;;AAKF,SAAKd,gBAAL;AACE,aAAO,EACL,GAAGW,KADE;AAELJ,QAAAA,KAAK,EAAE,CAAC,GAAGI,KAAK,CAACJ,KAAV,EAAiBK,MAAM,CAACE,OAAxB;AAFF,OAAP;;AAKF,SAAKb,aAAL;AACE,aAAO,EACL,GAAGU,KADE;AAELF,QAAAA,KAAK,EAAEG,MAAM,CAACE;AAFT,OAAP;;AAKF,SAAKZ,mBAAL;AACE,aAAO,EACL,GAAGS,KADE;AAELJ,QAAAA,KAAK,EAAEI,KAAK,CAACJ,KAAN,CAAYQ,GAAZ,CAAgBC,IAAI,IAC3BA,IAAI,CAACC,EAAL,CAAQC,QAAR,OAAuBN,MAAM,CAACE,OAAP,CAAeG,EAAf,CAAkBC,QAAlB,EAAvB,GACM;AAAEF,UAAAA,IAAF;AAAQ,aAAGJ,MAAM,CAACE;AAAlB,SADN,GAEME,IAHC;AAFF,OAAP;;AASF,SAAKb,gBAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELF,QAAAA,KAAK,EAAEG,MAAM,CAACE;AAFT,OAAP;;AAKF,SAAKV,mBAAL;AACE,aAAO,EACL,GAAGO,KADE;AAELJ,QAAAA,KAAK,EAAEI,KAAK,CAACJ,KAAN,CAAYY,MAAZ,CACLH,IAAI,IAAIA,IAAI,CAACC,EAAL,CAAQC,QAAR,OAAuBN,MAAM,CAACE,OAAP,CAAeG,EAAf,CAAkBC,QAAlB,EAD1B;AAFF,OAAP;;AAOF,SAAKb,gBAAL;AACE,aAAO,EACL,GAAGM,KADE;AAELF,QAAAA,KAAK,EAAEG,MAAM,CAACE;AAFT,OAAP;;AAKF,SAAKhB,wBAAL;AACE,aAAO,EACL,GAAGa,KADE;AAELH,QAAAA,WAAW,EAAEI,MAAM,CAACE;AAFf,OAAP;;AAKF,SAAKf,qBAAL;AACE,aAAO,EACL,GAAGY,KADE;AAELF,QAAAA,KAAK,EAAEG,MAAM,CAACE;AAFT,OAAP;;AAKF;AACE,aAAOH,KAAP;AApEJ;AAsED,CAvED;;AAyEA,eAAeD,QAAf","sourcesContent":["import {\n  GET_USERS_SUCCESS,\n  GET_USERS_FAIL,\n  GET_USER_PROFILE_SUCCESS,\n  GET_USER_PROFILE_FAIL,\n  ADD_USER_SUCCESS,\n  ADD_USER_FAIL,\n  UPDATE_USER_SUCCESS,\n  UPDATE_USER_FAIL,\n  DELETE_USER_SUCCESS,\n  DELETE_USER_FAIL\n  \n} from \"./actionTypes\";\n\nconst INIT_STATE = {\n  users: [],\n  userProfile: {},\n  error: {},\n};\n\nconst contacts = (state = INIT_STATE, action) => {\n  switch (action.type) {\n    case GET_USERS_SUCCESS:\n      return {\n        ...state,\n        users: action.payload,\n      };\n\n    case GET_USERS_FAIL:\n      return {\n        ...state,\n        error: action.payload,\n      };\n\n    case ADD_USER_SUCCESS:\n      return {\n        ...state,\n        users: [...state.users, action.payload],\n      };\n\n    case ADD_USER_FAIL:\n      return {\n        ...state,\n        error: action.payload,\n      };\n\n    case UPDATE_USER_SUCCESS:\n      return {\n        ...state,\n        users: state.users.map(user =>\n        user.id.toString() === action.payload.id.toString()\n            ? { user, ...action.payload }\n            : user\n        ),\n      };\n\n    case UPDATE_USER_FAIL:\n      return {\n        ...state,\n        error: action.payload,\n      };\n\n    case DELETE_USER_SUCCESS:\n      return {\n        ...state,\n        users: state.users.filter(\n          user => user.id.toString() !== action.payload.id.toString()\n        ),\n      };\n\n    case DELETE_USER_FAIL:\n      return {\n        ...state,\n        error: action.payload,\n      };\n\n    case GET_USER_PROFILE_SUCCESS:\n      return {\n        ...state,\n        userProfile: action.payload,\n      };\n\n    case GET_USER_PROFILE_FAIL:\n      return {\n        ...state,\n        error: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default contacts;\n"]},"metadata":{},"sourceType":"module"}